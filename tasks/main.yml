# Copyright 2022-2023 Chris Croome
#
# This file is part of the Webarchitects JC Ansible role.
#
# The Webarchitects JC Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects JC Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects JC Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Install or upgrade jc
  block:

    - name: Include apt role local fact tasks
      ansible.builtin.include_role:
        name: apt
        tasks_from: local_facts.yml
      when: >-
        ( ansible_local.dpkg.arch is not defined ) or
        ( ansible_local.bash.path is not defined )

    - name: Check that the install method is valid
      ansible.builtin.assert:
        that:
          - jc_install is regex('^deb|git|pipx$')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check version variable for deb and pipx installs
      ansible.builtin.assert:
        that:
          - ( jc_version is regex('^[0-9.]{5,10}$') ) or ( jc_version == "latest" )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: jc_install is regex('^deb|pipx$')

    - name: Check branch variable for git installs
      ansible.builtin.assert:
        that:
          - jc_version is regex('^dev|master$')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: jc_install == "git"

    - name: Fail if a deb install is specified and the role is not being run as root
      ansible.builtin.fail:
        msg: "This role can be run without become / as a non-root user for git and pipx installs but not for deb installs"
      when:
        - jc_install == "deb"
        - ansible_effective_user_id != 0

    - name: Packages pipx and jq present
      ansible.builtin.apt:
        pkg:
          - jq
          - pipx
        state: present
        update_cache: true
      when: ansible_effective_user_id == 0

    - name: Check pipx is present for git and pipx installs
      ansible.builtin.shell: type -p pipx
      args:
        executable: "{{ ansible_local.bash.path }}"
      check_mode: false
      changed_when: false
      when: jc_install is regex('^git|pipx$')

    - name: Check jc is present
      ansible.builtin.shell: type -p jc
      args:
        executable: "{{ ansible_local.bash.path }}"
      check_mode: false
      changed_when: false
      register: jc_type_path
      failed_when: jc_type_path.rc is not regex('^0|1$')

    - name: Check the installed jc version
      ansible.builtin.include_tasks: version.yml
      when: jc_type_path.rc == 0

    - name: Find the latest version of jc
      block:

        - name: Use a HEAD request to get the latest redirect URL
          ansible.builtin.uri:
            url: https://github.com/kellyjonbrazil/jc/releases/latest
            method: HEAD
            status_code: 302
            follow_redirects: none
          check_mode: false
          changed_when: false
          register: jc_latest_headers

        - name: Set a fact for the latest version of jc
          ansible.builtin.set_fact:
            jc_proposed: "{{ jc_latest_headers.location | urlsplit('path') | basename | regex_replace('^v') | string }}"

      when: jc_version == "latest"

    - name: Set a fact for the proposed version of jc for deb and pipx installs
      ansible.builtin.set_fact:
        jc_proposed: "{{ jc_version | string }}"
      when: jc_proposed is not defined

    - name: Debug the proposed version and variable type
      ansible.builtin.debug:
        msg:
          - "jc_proposed variable value {{ jc_proposed }}"
          - "jc_proposed variable type {{ jc_proposed | type_debug }}"
        verbosity: 1

    - name: Debug install task to be run
      ansible.builtin.debug:
        msg: "jc is to be installed using {{ jc_install }} version {{ jc_proposed }}"
        verbosity: 2

    - name: Include deb install tasks
      ansible.builtin.include_tasks: deb.yml
      when:
        - jc_install == "deb"
        - ( jc_deb is not defined ) or ( jc_existing is not defined ) or ( ( jc_version == "latest" ) and ( jc_existing is version(jc_proposed, '<') ) ) or ( ( jc_version != "latest" ) and ( jc_existing is not version(jc_version, '=') ) )
        - ansible_effective_user_id == 0

    - name: Include git install tasks
      ansible.builtin.include_tasks: git.yml
      when:
        - jc_install == "git"

    - name: Debug pipx variables
      ansible.builtin.debug:
        msg:
          - "jc_pipx variable value {{ jc_pipx }}"
          - "jc_existing variable value {{ jc_existing }}"
          - "jc_proposed variable value {{ jc_proposed }}"
        verbosity: 1
      when: jc_pipx is defined

    - name: Debug pipx versions
      ansible.builtin.debug:
        msg:
          - pipx tasks should be included
        verbosity: 1
      when: jc_existing is ansible.builtin.version(jc_proposed, 'le', version_type='semver')

    - name: Include pipx install tasks
      ansible.builtin.include_tasks: pipx.yml
      when:
        - jc_install == "pipx"
        - ( jc_pipx is not defined ) or ( jc_pipx is defined and jc_pipx | bool and jc_existing is defined and jc_existing is version(jc_proposed, '<') )

    - fail:

    - name: Check jc path
      ansible.builtin.shell: type -p jc
      args:
        executable: "{{ ansible_local.bash.path }}"
      check_mode: false
      changed_when: false
      register: jc_type_path
      failed_when: jc_type_path.rc is not regex('^0|1$')

    - name: Something has gone wrong
      ansible.builtin.fail:
        msg: "Sorry, something has gone wrong, jc has not be found in the $PATH."
      when: jc_type_path.rc != 0
      check_mode: true

    - name: Check the installed jc version
      ansible.builtin.include_tasks: version.yml
      when: jc_type_path.rc == 0

    - name: Install Bash completion
      ansible.builtin.include_tasks: bash.yml
      when:
        - ( jc_bash is defined ) and ( jc_bash | bool )
        - ( jc_existing is defined ) and ( jc_existing is version('1.20.1', '>=') )
        - ( jc_install != "deb" ) or ( jc_install == "deb" and jc_existing is version('1.20.2', '<') )
        - ansible_effective_user_id == 0

    - name: The installed version of jc
      ansible.builtin.debug:
        msg: "jc version {{ jc_existing }} is installed"

  when: jc | bool
  tags:
    - jc
...
