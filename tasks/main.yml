---
- name: Install or upgrade jc
  block:

    - name: Check install method variable
      ansible.builtin.assert:
        that:
          - jc_install is defined
          - jc_install is regex('^deb|git|pip$')

    - name: Check version variable for deb and pip installs
      ansible.builtin.assert:
        that:
          - jc_version is regex('^[0-9.]{5,10}$')
      when: jc_install is regex('^deb|pip$')

    - name: Check branch variable for git installs
      ansible.builtin.assert:
        that:
          - jc_version is regex('^dev|latest|master$')
      when: jc_install == "git"

    - name: Which jc
      ansible.builtin.command: which jc
      check_mode: false
      changed_when: false
      register: jc_which
      failed_when: jc_which.rc is not regex('^0|1$')

    - name: Check the installed jc version
      include_tasks: version.yml
      when: jc_which.rc == 0

    - name: Find the latest version of jc
      block:

        - name: Use a HEAD request to get the latest redirect URL
          ansible.builtin.uri:
            url: https://github.com/kellyjonbrazil/jc/releases/latest
            method: HEAD
            status_code: 302
            follow_redirects: none
          check_mode: false
          changed_when: false
          register: jc_latest_headers

        - name: Set a fact for the latest version of jc
          ansible.builtin.set_fact:
            jc_proposed: "{{ jc_latest_headers.location | urlsplit('path') | basename | regex_replace('^v') | string }}"

      when: jc_version == "latest"

    - name: Set a fact for the proposed version of jc for deb and pip installs
      ansible.builtin.set_fact:
        jc_proposed: "{{ jc_version | string }}"
      when: ( jc_proposed is not defined ) or ( jc_proposed != "latest" )

    - name: Debug the proposed version and variable type
      ansible.builtin.debug:
        msg:
          - "variable value {{ jc_proposed }}"
          - "variable type {{ jc_proposed | type_debug }}"
        verbosity: 2

    - name: Download and install a new version of jc
      block:

        - name: Include deb install tasks
          ansible.builtin.include_tasks: deb.yml
          when:
            - jc_install == "deb"
            - jc_version is not regex('^dev|latest|master$')

        - name: Include git install tasks
          ansible.builtin.include_tasks: git.yml
          when:
            - jc_install == "git"
            - jc_version is regex('^dev|latest|master$')

        - name: Include pip install tasks
          ansible.builtin.include_tasks: pip.yml
          when:
            - jc_install == "pip"
            - jc_version is not regex('^dev|latest|master$')

      when: >
        ( jc_which.rc == 1 ) or
        ( ( jc_version == "latest" ) and ( jc_existing is version(jc_proposed, '<') ) ) or
        ( ( jc_version != "latest" ) and ( jc_existing is not version(jc_version, '=') ) )

    - name: Check the installed jc version
      include_tasks: version.yml

    - name: The installed version of jc
      debug:
        msg: "jc version {{ jc_existing }} is installed"

  when: jc
  tags:
    - jc
...
