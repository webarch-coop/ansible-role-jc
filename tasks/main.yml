---
- name: Install or upgrade jc
  block:

    - name: Which jc
      ansible.builtin.command: which jc
      check_mode: false
      changed_when: false
      register: jc_which
      failed_when: jc_which.rc is not regex('^0|1$')

    - name: Check the installed jc version
      block:

        - name: Check the jc version
          command: jc -a
          check_mode: false
          changed_when: false
          register: jc_a

        - name: Set a fact for the existing version
          set_fact:
            jc_existing: "{{ jc_a.stdout | from_json }}"

        - name: Debug the existing version
          debug:
            var: jc_existing.version
            verbosity: 2

      when: jc_which.rc == 0

    - name: Find the latest version of jc
      block:

        - name: Use a HEAD request to get the latest redirect URL
          uri:
            url: https://github.com/kellyjonbrazil/jc/releases/latest
            method: HEAD
            status_code: 302
            follow_redirects: none
          check_mode: false
          changed_when: false
          register: jc_latest_headers

        - name: Set a fact for the latest version of jc
          set_fact:
            jc_proposed: "{{ jc_latest_headers.location | urlsplit('path') | basename | regex_replace('^v') | string }}"

        - name: Debug the proposed version
          debug:
            var: jc_proposed
            verbosity: 2

      when: jc_version == "latest"

    - name: Set a fact for the proposed version of jc when not the latest
      set_fact:
        jc_proposed: "{{ jc_version | string }}"
      when: jc_version != "latest"

    - name: Download and install a new version of jc
      block:

        - name: Download jc deb
          get_url:
            url: "https://github.com/kellyjonbrazil/jc/releases/download/v{{ jc_proposed }}/jc_{{ jc_proposed }}-1_amd64.deb"
            dest: "/root/jc_{{ jc_proposed }}-1_amd64.deb"

        - name: Install jc
          apt:
            deb: "/root/jc_{{ jc_proposed }}-1_amd64.deb"
            state: present

      when: >
        ( jc_which.rc == 1 ) or
        ( ( jc_version == "latest" ) and ( jc_existing.version | string is version(jc_version, '<') ) ) or
        ( ( jc_version != "latest" ) and ( jc_existing.version | string is not version(jc_version, '=') ) )

  when: jc
  tags:
    - jc
...
