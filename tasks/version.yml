# Copyright 2022-2023 Chris Croome
#
# This file is part of the Webarchitects JC Ansible role.
#
# The Webarchitects JC Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects JC Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects JC Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check the version of jc
  block:

    - name: Get the apt package facts
      ansible.builtin.package_facts:
        manager: apt

    - fail:

    - name: Set a fact if jc deb is installed
      ansible.builtin.set_fact:
        jc_deb: true
      when: ( "jc" in ansible_facts.packages )

    - name: Check if jc is installed using pipx
      ansible.builtin.command: pipx list --json
      check_mode: false
      changed_when: false
      register: jc_pipx_list_json
      failed_when: jc_pipx_list_json.rc is not regex('^0|1$')

    - name: Set a fact for the pipx list json results
      ansible.builtin.set_fact:
        jc_pipx_list: "{{ jc_pipx_list_json.stdout | from_json }}"

    - name: Set a fact when jc is installed using pipx
      ansible.builtin.set_fact:
        jc_pipx: true
        jc_existing: "{{ jc_pipx_list.venvs.jc.metadata.main_package.package_version | string }}"
      when:
        - jc_pipx_list.venvs.jc.metadata.main_package.apps is defined
        - ( "jc" in jc_pipx_list.venvs.jc.metadata.main_package.apps )

    - name: Get the JC version by running jc
      block:

        - name: Check the jc version
          ansible.builtin.command: jc -a
          check_mode: false
          changed_when: false
          register: jc_a

        - name: Set a fact for the existing version information
          ansible.builtin.set_fact:
            jc_existing_json: "{{ jc_a.stdout | from_json }}"

        - name: Set a fact for the existing version information
          ansible.builtin.set_fact:
            jc_existing: "{{ jc_existing_json.version | string }}"

      when: >-
        ( ( jc_deb is defined ) and ( jc_deb | bool ) ) or
        ( jc_pipx_list.venvs.jc.metadata.main_package.package_version is not defined )

    - name: Debug the existing version and variable type
      ansible.builtin.debug:
        msg:
          - "jc_existing variable value {{ jc_existing }}"
          - "jc_existing variable type {{ jc_existing | type_debug }}"
        verbosity: 2

  tags:
    - jc
...
